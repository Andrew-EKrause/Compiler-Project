
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include "IOMngr.h"
    #include "SymTab.h"
    #include "Semantics.h"
    #include "CodeGen.h"

    extern int yylex(); /* The next token function. */
    extern char *yytext; /* The matched token text.  */
    extern int yyleng; /* The token text length.   */
    extern int yyparse();
    extern int yyerror(char *);
    void dumpTable();

    extern SymTab *table;
%}

%union {
    long val;
    char * string;
    struct ExprRes * ExprRes;
    struct InstrSeq * InstrSeq;
    struct BExprRes * BExprRes;
}

%type <string> Id
%type <InstrSeq> StmtSeq
%type <InstrSeq> Stmt
%type <InstrSeq> AssnmtStmt
%type <ExprRes> ExprL0
%type <ExprRes> ExprL1
%type <ExprRes> ExprL2
%type <ExprRes> ExprL3

%token Ident 		
%token IntLit 	
%token Int
%token Write
%token IF
%token EQ	
%token NOT_EQ
%token LT_OR_EQ
%token GT_OR_EQ
%token LT
%token GT
%token OR
%token AND

%%

Prog			            : Declarations StmtSeq						                           { Finish($2); };
Declarations	            : Dec Declarations							                           { };
            	            |											                           { };
Dec			                : Int Ident                                                            { enterName(table, yytext); }';' {};
StmtSeq 		            : Stmt StmtSeq								                           { $$ = AppendSeq($1, $2); };
    		                |											                           { $$ = NULL; };
Stmt			            : Write '(' ExprL0 ')' ';'					                           { $$ = doPrint($3); };
    			            | IF '(' ExprL0 ')' '{' StmtSeq '}'			                           { $$ = doIf($3, $6); };
                            | AssnmtStmt ';'                                                       { $$ = $1; };
AssnmtStmt			        : Id '=' ExprL0							                               { $$ = doAssign($1, $3); };
ExprL0                      : '!' ExprL1                                                           { $$ = doNegate($2); };
                            | ExprL0 OR ExprL1                                                     { $$ = doOr($1, $3); };
                            | ExprL0 AND ExprL1                                                    { $$ = doAnd($1, $3); };
      		                | ExprL0 EQ ExprL1						                               { $$ = doBExprEq($1, $3); };
                            | ExprL0 NOT_EQ ExprL1                                                 { $$ = doBExprNotEq($1, $3); };
                            | ExprL0 LT_OR_EQ ExprL1                                               { $$ = doBExprLtOrEq($1, $3); };
                            | ExprL0 GT_OR_EQ ExprL1                                               { $$ = doBExprGtOrEq($1, $3); };
                            | ExprL0 LT ExprL1                                                     { $$ = doBExprLt($1, $3); };
                            | ExprL0 GT ExprL1                                                     { $$ = doBExprGt($1, $3); };
                            | ExprL1                                                               { $$ = $1; };
ExprL1                      : '(' ExprL1 ')'                                                       { $$ = $2; };
    			            | ExprL1 '+' ExprL2						                               { $$ = doAdd($1, $3); };
    			            | ExprL1 '-' ExprL2							                           { $$ = doSubtraction($1, $3); };
    			            | ExprL2									                           { $$ = $1; };
ExprL2                      : '(' ExprL2 ')'                                                       { $$ = $2; };
    		                | ExprL2 '*' ExprL3							                           { $$ = doMult($1, $3); };
    		                | ExprL2 '/' ExprL3							                           { $$ = doDivide($1, $3); };
    		                | ExprL2 '%' ExprL3							                           { $$ = doModulo($1, $3); };
                            | ExprL2 '^' ExprL3                                                    { $$ = doExponential($1, $3); };
    		                | ExprL3									                           { $$ = $1; };
ExprL3                      : '(' ExprL3 ')'                                                       { $$ = $2; };
    		                | IntLit									                           { $$ = doIntLit(yytext); };
                            | '-'IntLit                                                            { $$ = doIntLitNeg(yytext); };
    		                | Ident									                               { $$ = doRval(yytext); };
Id			                : Ident									                               { $$ = strdup(yytext); }

%%

int yyerror(char *s) {
    writeIndicator(getCurrentColumnNum());
    writeMessage("Illegal Character in YACC");
    return 1;
}
