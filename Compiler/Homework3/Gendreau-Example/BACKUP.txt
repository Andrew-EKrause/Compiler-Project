%{
    #include <string.h>
    #include <stdbool.h>
    #include "semantics.h"
    #include "IOMngr.h"

    extern int yylex(); /* The next token function */
    extern char *yytext(); /* The matched token text. */
    extern int yyerror(char *s);
%}

%union {
    bool boolean;
    char *string;
}

%type <string> Id 
%type <boolean> Expr 
%type <boolean> Term
%type <boolean> Factor 

%token Ident 
%token TRUE 
%token FALSE
%token OR
%token AND

%%

Prog            : StmtSeq               {printSymTab();}
StmtSeq         : Stmt StmtSeq          { };
StmtSeq         :                       { };
Stmt            : Id'='Expr';'          {storeVar($1, $3);};
Expr            : Expr OR Term          {$$ = doOR($1, $3);};
Expr            : Term                  {$$ = $1;};
Term            : Term AND Factor       {$$ = doAND($1, $3);};
Term            : Factor                {$$ = $1;};
Factor          : '!'Factor             {$$ = doNOT($2);};
Factor          : '('Expr')'            {$$ = $2;};
Factor          : Id                    {$$ = getVal($1);};
Factor          : TRUE                  {$$ = true;};
Factor          : FALSE                 {$$ = false;};
Id              : Ident                 {$$ = strdup(yytext);};

%%

int yyerror(char *s) {
    writeIndicator(getCurrentColumnNum());
    writeMessage("Illegal Character in YACC");
    return 1;
}














%{
    #include <stdbool.h>
    #include "IOMngr.h"
    #include "boolExpr.tab.h"

    #define YY_INPUT(buf,result,max_size) \
    { int c = getNextSourceChar(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
    }
%}

letter [A-Za-z]
digit [0-9]

%%

true                            {return TRUE;}
false                           {return FALSE;}
{letter}({letter}|{digit})*     {return Ident;}
\|\|                            {return OR;}
\&\&                            {return AND;}
\=                              {return '=';}
\!                              {return '!';}
\;                              {return ';';}
\(                              {return '(';}
\)                              {return ')';}
\[\]                            {}
\t                              {}
\r                              {}
\n                              {}

.                               {
                                    
                                }

%%

int yywrap() {
    return 1;
}











