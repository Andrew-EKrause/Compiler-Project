
===============================================
TEST 1: Series of Commands to test Homework 3:
===============================================

1. bison -d h3.y
2. flex h3.l
3. gcc -o h3 h3.tab.c lex.yy.c semantics.c SymTab.c IOMngr.c main.c -fsanitize=address

===============================================
NOTES:

// COMPILING WITH gdb WILL HELP YOU DEBUG YOUR CODE EASIER.

// There is some memory management that you may have to worry about 
// for homework 3.

// Also, make use of the startIterator and nextEntry functions in 
// the Symbol Table file class to move through the symbol table(s)
// in your print statement function as well as your other functions.

// When you create your print method for homework 3, make sure that
// you create a separate, simple print function for printing out 
// the attributes (other symbol tables) of each attribute for each
// item in the main symbol table. Again, you can use the startIterator
// and nextEntry functions in the Symbol Table file for this.

===============================================

BACKUP:

// // If the hash value is the table size - 1, that means that the
// // current (name, attribute) pair is located in the last slot
// // of the symbol table. Therefore, you need to check it.
// if(hashValue == table->size - 1) {

//     // Create temporary variables to traverse 
//     // through the entries in the last slot.
//     SymEntry *currentEntry = table->contents[hashValue];
//     SymEntry *nextEntry;

//     // While there are still entries in the slot,
//     // move through each entry in the given slot.
//     while(currentEntry != NULL) {

//         // Move to the next entry in the slot.
//         nextEntry = currentEntry;
//         currentEntry = currentEntry->next;
//     }

//     // When you get to the end of the entries in 
//     // the given slot, check if there are no other
//     // entries after the current entry in the slot.
//     if(nextEntry != NULL && (strcmp(nextEntry->name, table->current->name) == 0)) {

//         // If the conditional is met, there are
//         // no other next entries in the table.
//         return 0;
//     }
// }
